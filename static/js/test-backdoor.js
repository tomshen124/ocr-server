// OCRÊúçÂä°ÊµãËØïÂêéÈó®ËÑöÊú¨
const TestBackdoor = {
    selectedFiles: [],
    config: null,
    
    init() {
        // Âä†ËΩΩÊµãËØïÈÖçÁΩÆ
        this.loadTestConfig();
        this.bindEvents();
        this.generateRequestId();
        this.log('üîß ÊµãËØïÂêéÈó®Â∑≤ÂàùÂßãÂåñ');
    },

    // Âä†ËΩΩÊµãËØïÈÖçÁΩÆ
    loadTestConfig() {
        if (window.TestConfig) {
            this.config = window.TestConfig;
            this.log('‚úÖ ÊµãËØïÈÖçÁΩÆÂ∑≤Âä†ËΩΩ');
        } else {
            console.warn('‚ö†Ô∏è ÊµãËØïÈÖçÁΩÆÊú™ÊâæÂà∞Ôºå‰ΩøÁî®ÈªòËÆ§ËÆæÁΩÆ');
            this.config = {
                baseConfig: { debugMode: true },
                log: (msg, level) => console.log(`[BACKDOOR-${level?.toUpperCase()}]`, msg)
            };
        }
    },

    // Áªü‰∏ÄÊó•ÂøóËæìÂá∫
    log(message, level = 'info') {
        if (this.config && this.config.log) {
            this.config.log(`[ÂêéÈó®Â∑•ÂÖ∑] ${message}`, level);
        } else {
            console.log(`[BACKDOOR] ${message}`);
        }
    },

    bindEvents() {
        const fileInput = document.getElementById('fileInput');
        const fileUploadArea = document.getElementById('fileUploadArea');

        // Êñá‰ª∂ÈÄâÊã©‰∫ã‰ª∂
        fileInput.addEventListener('change', (e) => {
            this.handleFileSelect(e.target.files);
        });

        // ÊãñÊãΩ‰∏ä‰º†
        fileUploadArea.addEventListener('click', () => {
            fileInput.click();
        });

        fileUploadArea.addEventListener('dragover', (e) => {
            e.preventDefault();
            fileUploadArea.classList.add('dragover');
        });

        fileUploadArea.addEventListener('dragleave', () => {
            fileUploadArea.classList.remove('dragover');
        });

        fileUploadArea.addEventListener('drop', (e) => {
            e.preventDefault();
            fileUploadArea.classList.remove('dragover');
            this.handleFileSelect(e.dataTransfer.files);
        });
    },

    // ÁîüÊàêËØ∑Ê±ÇID
    generateRequestId() {
        const timestamp = Date.now();
        const random = Math.random().toString(36).substr(2, 5);
        document.getElementById('requestId').value = `REQ_${timestamp}_${random}`;
    },

    // Â§ÑÁêÜÊñá‰ª∂ÈÄâÊã©
    handleFileSelect(files) {
        Array.from(files).forEach(file => {
            if (!this.selectedFiles.find(f => f.name === file.name && f.size === file.size)) {
                this.selectedFiles.push(file);
            }
        });
        this.updateFileList();
    },

    // Êõ¥Êñ∞Êñá‰ª∂ÂàóË°®ÊòæÁ§∫
    updateFileList() {
        const fileList = document.getElementById('fileList');
        fileList.innerHTML = '';

        this.selectedFiles.forEach((file, index) => {
            const fileItem = document.createElement('div');
            fileItem.className = 'file-item';
            fileItem.innerHTML = `
                <div class="file-info">
                    <div>${file.name}</div>
                    <div class="file-size">${this.formatFileSize(file.size)}</div>
                </div>
                <button class="remove-btn" onclick="TestBackdoor.removeFile(${index})">Âà†Èô§</button>
            `;
            fileList.appendChild(fileItem);
        });
    },

    // ÁßªÈô§Êñá‰ª∂
    removeFile(index) {
        this.selectedFiles.splice(index, 1);
        this.updateFileList();
    },

    // Ê†ºÂºèÂåñÊñá‰ª∂Â§ßÂ∞è
    formatFileSize(bytes) {
        if (bytes === 0) return '0 Bytes';
        const k = 1024;
        const sizes = ['Bytes', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    },

    // ÁîüÊàêÁ§∫‰æãÊï∞ÊçÆ
    generateSampleData() {
        document.getElementById('userId').value = 'test_user_' + Date.now();
        document.getElementById('matterId').value = 'MATTER_' + Math.random().toString(36).substr(2, 8).toUpperCase();
        document.getElementById('matterName').value = 'Â∑•Á®ãÊ∏£ÂúüÂ†ÜËøêËØÅÊ†∏ÂáÜ';
        document.getElementById('channel').value = 'web';
        this.generateRequestId();

        // Ê®°ÊãüÊ∑ªÂä†‰∏Ä‰∫õÊñá‰ª∂
        const sampleFiles = [
            { name: 'Ëê•‰∏öÊâßÁÖß.pdf', size: 1024000, type: 'application/pdf' },
            { name: 'Ê≥ï‰∫∫Ë∫´‰ªΩËØÅ.jpg', size: 512000, type: 'image/jpeg' },
            { name: 'ÂÖ¨Âè∏Á´†Á®ã.pdf', size: 2048000, type: 'application/pdf' }
        ];

        // ÂàõÂª∫Ê®°ÊãüÊñá‰ª∂ÂØπË±°
        this.selectedFiles = sampleFiles.map(fileInfo => {
            const file = new File([''], fileInfo.name, { type: fileInfo.type });
            Object.defineProperty(file, 'size', { value: fileInfo.size });
            return file;
        });

        this.updateFileList();
        this.showToast('Â∑≤ÁîüÊàêÁ§∫‰æãÊï∞ÊçÆ', 'success');
    },

    // Ê∏ÖÁ©∫ÊâÄÊúâÊï∞ÊçÆ
    clearAll() {
        document.getElementById('userId').value = '';
        document.getElementById('matterId').value = '';
        document.getElementById('matterName').value = '';
        document.getElementById('requestId').value = '';
        document.getElementById('channel').value = 'web';
        this.selectedFiles = [];
        this.updateFileList();
        this.hideResult();
        this.showToast('Â∑≤Ê∏ÖÁ©∫ÊâÄÊúâÊï∞ÊçÆ', 'info');
    },

    // Êèê‰∫§È¢ÑÂÆ°Êï∞ÊçÆÔºàÊ®°ÊãüÁ¨¨‰∏âÊñπÁ≥ªÁªüÔºâ
    async submitPreview() {
        try {
            this.showLoading(true);

            // ÊûÑÂª∫È¢ÑÂÆ°Êï∞ÊçÆ
            const previewData = this.buildPreviewData();
            
            this.showResult('ÂèëÈÄÅÈ¢ÑÂÆ°ËØ∑Ê±Ç...', JSON.stringify(previewData, null, 2));

            // ÂèëÈÄÅÂà∞È¢ÑÂÆ°Êé•Âè£
            const response = await fetch('/api/preview', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(previewData)
            });

            const result = await response.json();

            if (result.success) {
                this.showResult('‚úÖ È¢ÑÂÆ°Êèê‰∫§ÊàêÂäü', JSON.stringify(result, null, 2));
                this.showToast('È¢ÑÂÆ°Êï∞ÊçÆÊèê‰∫§ÊàêÂäüÔºÅ', 'success');
                
                // Â¶ÇÊûúÊúâÈ¢ÑËßàURLÔºåÂèØ‰ª•ÊâìÂºÄÈ¢ÑËßà
                if (result.data && result.data.previewUrl) {
                    setTimeout(() => {
                        if (confirm('ÊòØÂê¶ÊâìÂºÄÈ¢ÑËßàÊñáÊ°£Ôºü')) {
                            window.open(result.data.previewUrl, '_blank');
                        }
                    }, 1000);
                }
            } else {
                this.showResult('‚ùå È¢ÑÂÆ°Êèê‰∫§Â§±Ë¥•', JSON.stringify(result, null, 2));
                this.showToast('È¢ÑÂÆ°Êï∞ÊçÆÊèê‰∫§Â§±Ë¥•: ' + result.errorMsg, 'error');
            }

        } catch (error) {
            console.error('Êèê‰∫§È¢ÑÂÆ°Êï∞ÊçÆÈîôËØØ:', error);
            this.showResult('‚ùå ËØ∑Ê±ÇÈîôËØØ', error.message);
            this.showToast('Êèê‰∫§Â§±Ë¥•: ' + error.message, 'error');
        } finally {
            this.showLoading(false);
        }
    },

    // Áõ¥Êé•‰∏ä‰º†Êñá‰ª∂ÔºàOCRËØÜÂà´Ôºâ
    async uploadFiles() {
        if (this.selectedFiles.length === 0) {
            this.showToast('ËØ∑ÂÖàÈÄâÊã©Êñá‰ª∂', 'warning');
            return;
        }

        try {
            this.showLoading(true);
            const results = [];

            for (let file of this.selectedFiles) {
                if (file.size === 0) {
                    // Ë∑≥ËøáÊ®°ÊãüÊñá‰ª∂
                    results.push({
                        fileName: file.name,
                        status: 'skipped',
                        message: 'Ê®°ÊãüÊñá‰ª∂ÔºåË∑≥Ëøá‰∏ä‰º†'
                    });
                    continue;
                }

                const formData = new FormData();
                formData.append('file', file);

                const response = await fetch('/api/upload', {
                    method: 'POST',
                    body: formData
                });

                const result = await response.json();
                results.push({
                    fileName: file.name,
                    status: result.success ? 'success' : 'error',
                    data: result.data,
                    error: result.errorMsg
                });
            }

            this.showResult('üì§ Êñá‰ª∂‰∏ä‰º†ÁªìÊûú', JSON.stringify(results, null, 2));
            this.showToast('Êñá‰ª∂‰∏ä‰º†ÂÆåÊàê', 'success');

        } catch (error) {
            console.error('‰∏ä‰º†Êñá‰ª∂ÈîôËØØ:', error);
            this.showResult('‚ùå ‰∏ä‰º†ÈîôËØØ', error.message);
            this.showToast('‰∏ä‰º†Â§±Ë¥•: ' + error.message, 'error');
        } finally {
            this.showLoading(false);
        }
    },

    // ÊûÑÂª∫È¢ÑÂÆ°Êï∞ÊçÆ
    buildPreviewData() {
        const userId = document.getElementById('userId').value;
        const matterId = document.getElementById('matterId').value;
        const matterName = document.getElementById('matterName').value;
        const requestId = document.getElementById('requestId').value;
        const channel = document.getElementById('channel').value;

        // ÊûÑÂª∫ÊùêÊñôÊï∞ÊçÆ
        const materialData = this.selectedFiles.map((file, index) => ({
            code: `MATERIAL_${index + 1}`,
            attachmentList: [{
                attaName: file.name,
                attaUrl: `http://example.com/files/${file.name}`, // Ê®°ÊãüURL
                isCloudShare: false
            }]
        }));

        return {
            userId: userId,
            preview: {
                matterId: matterId,
                matterType: "Ë°åÊîøËÆ∏ÂèØ",
                matterName: matterName,
                copy: false,
                channel: channel,
                requestId: requestId,
                sequenceNo: `SEQ_${Date.now()}`,
                formData: [],
                materialData: materialData,
                agentInfo: {
                    userId: userId,
                    certificateType: "Ë∫´‰ªΩËØÅ"
                },
                subjectInfo: {
                    userId: userId,
                    certificateType: "Ë∫´‰ªΩËØÅ"
                }
            }
        };
    },

    // ÊòæÁ§∫ÁªìÊûú
    showResult(title, content) {
        const resultArea = document.getElementById('resultArea');
        const resultContent = document.getElementById('resultContent');
        
        resultContent.textContent = `${title}\n\n${content}`;
        resultArea.style.display = 'block';
        
        // ÊªöÂä®Âà∞ÁªìÊûúÂå∫Âüü
        resultArea.scrollIntoView({ behavior: 'smooth' });
    },

    // ÈöêËóèÁªìÊûú
    hideResult() {
        document.getElementById('resultArea').style.display = 'none';
    },

    // ÊòæÁ§∫Âä†ËΩΩÁä∂ÊÄÅ
    showLoading(show) {
        // ÁÆÄÂçïÁöÑÂä†ËΩΩÊèêÁ§∫
        if (show) {
            this.showToast('Â§ÑÁêÜ‰∏≠...', 'info');
        }
    },

    // ÊòæÁ§∫ÊèêÁ§∫Ê∂àÊÅØ
    showToast(message, type = 'info') {
        // ÂàõÂª∫toastÂÖÉÁ¥†
        const toast = document.createElement('div');
        toast.className = `toast toast-${type}`;
        toast.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 12px 20px;
            border-radius: 5px;
            color: white;
            font-size: 14px;
            z-index: 10000;
            opacity: 0;
            transition: opacity 0.3s ease;
        `;

        // ËÆæÁΩÆËÉåÊôØËâ≤
        const colors = {
            success: '#27ae60',
            error: '#e74c3c',
            warning: '#f39c12',
            info: '#3498db'
        };
        toast.style.backgroundColor = colors[type] || colors.info;
        toast.textContent = message;

        document.body.appendChild(toast);

        // ÊòæÁ§∫Âä®Áîª
        setTimeout(() => {
            toast.style.opacity = '1';
        }, 100);

        // Ëá™Âä®ÈöêËóè
        setTimeout(() => {
            toast.style.opacity = '0';
            setTimeout(() => {
                document.body.removeChild(toast);
            }, 300);
        }, 3000);
    }
};

// È°µÈù¢Âä†ËΩΩÂÆåÊàêÂêéÂàùÂßãÂåñ
document.addEventListener('DOMContentLoaded', () => {
    TestBackdoor.init();
});

// ÂÖ®Â±ÄÂø´Êç∑ÈîÆÊîØÊåÅ
document.addEventListener('keydown', (e) => {
    if (e.ctrlKey && e.shiftKey && e.key === 'T') {
        e.preventDefault();
        window.location.href = '/static/test.html';
    }
});
